# CodeDocGen Configuration Example
# This file demonstrates the available configuration options

# Language-specific templates for documentation generation
templates:
  c++:
    brief: "/**\n * \\brief {description}\n */"
    param: " * \\param {name} {description}"
    return: " * \\return {description}"
    throws: " * \\throws {exception} {description}"
    detailed: "/**\n * \\brief {description}\n *\n{params}{returns}{throws}\n */"
  
  python:
    brief: '""" {description} """'
    param: "    :param {name}: {description}"
    return: "    :return: {description}"
    raises: "    :raises {exception}: {description}"
    detailed: '"""\n    {description}\n\n{params}{returns}{raises}\n    """'
  
  java:
    brief: "/**\n * {description}\n */"
    param: " * @param {name} {description}"
    return: " * @return {description}"
    throws: " * @throws {exception} {description}"
    detailed: "/**\n * {description}\n *\n{params}{returns}{throws}\n */"

# Custom inference rules for function name patterns
# These rules are applied in order of priority (highest first)
rules:
  # High priority rules
  - pattern: "^validate.*"
    brief: "Validates the input {params}."
    priority: 10
  
  - pattern: "^compute.*"
    brief: "Computes the {noun} based on {params}."
    priority: 9
  
  # Medium priority rules
  - pattern: "^get.*"
    brief: "Retrieves the {noun}."
    priority: 8
  
  - pattern: "^set.*"
    brief: "Sets the {noun} to the specified value."
    priority: 8
  
  - pattern: "^is.*"
    brief: "Checks if the {noun} meets the specified condition."
    priority: 7
  
  - pattern: "^has.*"
    brief: "Checks if the {noun} contains the specified element."
    priority: 7
  
  # Lower priority rules
  - pattern: "^add.*"
    brief: "Adds the {noun} to the collection."
    priority: 6
  
  - pattern: "^remove.*"
    brief: "Removes the {noun} from the collection."
    priority: 6
  
  - pattern: "^create.*"
    brief: "Creates a new {noun} instance."
    priority: 5
  
  - pattern: "^delete.*"
    brief: "Deletes the {noun} from the system."
    priority: 5
  
  - pattern: "^update.*"
    brief: "Updates the {noun} with new information."
    priority: 4
  
  - pattern: "^process.*"
    brief: "Processes the {noun} according to the specified logic."
    priority: 3
  
  - pattern: "^handle.*"
    brief: "Handles the {noun} event or request."
    priority: 2

# File extensions for each supported language
file_extensions:
  c++:
    - ".c"
    - ".cpp"
    - ".cc"
    - ".cxx"
    - ".h"
    - ".hpp"
    - ".hh"
    - ".hxx"
  
  python:
    - ".py"
    - ".pyx"
    - ".pxd"
  
  java:
    - ".java"

# Patterns to ignore during repository scanning
ignore_patterns:
  - "*/node_modules/*"
  - "*/__pycache__/*"
  - "*/build/*"
  - "*/dist/*"
  - "*.pyc"
  - "*.o"
  - "*.so"
  - "*.dll"
  - "*.exe"
  - "*/venv/*"
  - "*/env/*"
  - "*/target/*"
  - "*/bin/*"
  - "*/obj/*"

# NLTK configuration
nltk:
  download_data: true
  corpora:
    - "punkt"
    - "averaged_perceptron_tagger"

# Logging configuration
logging:
  level: "INFO"  # DEBUG, INFO, WARNING, ERROR, CRITICAL
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

# AI configuration for intelligent comment generation
ai:
  enabled: false  # Set to true to enable AI-powered analysis
  provider: "groq"  # Options: "groq" (requires API key) or "openai" (requires API key)
  groq_api_key: ""  # Get from https://console.groq.com/keys or set GROQ_API_KEY environment variable
  openai_api_key: ""  # Get from https://platform.openai.com/account/api-keys or set OPENAI_API_KEY environment variable
  max_retries: 3  # Number of retries for AI API calls
  retry_delay: 1.0  # Delay between retries in seconds 

# Optional C/C++ libclang configuration overrides
# You can either set a specific library file or a directory containing the library.
# These are lower precedence than environment variables.
cpp:
  libclang:
    # library_file: "/absolute/path/to/libclang.dylib"  # .so on Linux, .dll on Windows
    # library_path: "/absolute/path/to/llvm/lib"