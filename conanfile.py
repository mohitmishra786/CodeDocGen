from conan import ConanFile
from conan.tools.cmake import CMake, CMakeToolchain, CMakeDeps
from conan.tools.files import copy, rmdir
import os


class CodeDocGenConan(ConanFile):
    name = "codedocgen"
    version = "1.0.0"
    description = "Automatic documentation generation for C++ codebases"
    license = "MIT"
    url = "https://github.com/mohitmishra786/CodeDocGen"
    homepage = "https://github.com/mohitmishra786/CodeDocGen"
    topics = ("documentation", "code-generation", "cpp", "ast")
    settings = "os", "compiler", "build_type", "arch"
    options = {
        "shared": [True, False],
        "fPIC": [True, False],
        "with_python_bindings": [True, False],
    }
    default_options = {
        "shared": False,
        "fPIC": True,
        "with_python_bindings": False,
    }
    exports_sources = "CMakeLists.txt", "src/*", "include/*", "cmake/*"
    generators = "CMakeDeps"

    def config_options(self):
        if self.settings.os == "Windows":
            del self.options.fPIC

    def configure(self):
        if self.options.shared:
            self.options.rm_safe("fPIC")

    def layout(self):
        self.folders.build = "build"
        self.folders.generators = "build/generators"

    def requirements(self):
        # Add dependencies here if needed
        pass

    def build_requirements(self):
        self.tool_requires("cmake/[>=3.14]")

    def generate(self):
        tc = CMakeToolchain(self)
        tc.variables["BUILD_SHARED_LIBS"] = self.options.shared
        tc.variables["WITH_PYTHON_BINDINGS"] = self.options.with_python_bindings
        tc.generate()

    def build(self):
        cmake = CMake(self)
        cmake.configure()
        cmake.build()

    def package(self):
        cmake = CMake(self)
        cmake.install()
        
        # Copy license
        copy(self, "LICENSE", src=self.source_folder, dst=os.path.join(self.package_folder, "licenses"))
        
        # Remove CMake config files (they will be generated by conan)
        rmdir(self, os.path.join(self.package_folder, "lib", "cmake"))

    def package_info(self):
        self.cpp_info.set_property("cmake_file_name", "CodeDocGen")
        self.cpp_info.set_property("cmake_target_name", "CodeDocGen::codedocgen_cpp")
        self.cpp_info.set_property("pkg_config_name", "codedocgen")
        
        # Libraries
        self.cpp_info.libs = ["codedocgen_cpp"]
        
        if self.settings.os in ["Linux", "FreeBSD"]:
            self.cpp_info.system_libs = ["m"] 